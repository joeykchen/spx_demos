import "fmt"
import "math"

var color1, color2, color3, color4, color5, color6 Color
var x, y float64
var backdropName string
var hitItem, touching bool
var parent any
var costumeName string
var width, height float64

onMsg "testUnique", => {
	onTestStart(this)

    // 1. Color conversion test
    say "test color conversion"
    color1 = RGB(255, 0, 0)
    color2 = RGBA(255, 0, 0, 128)
    color3 = HSB(0, 100, 100)
    color4 = HSBA(0, 100, 100, 128)
    color5 = RGBf(1.0, 0.0, 0.0)
    color6 = RGBAf(1.0, 0.0, 0.0, 0.5)
    assert(color1 == RGB(255, 0, 0), "RGB color conversion failed")
    assert(color2 == RGBA(255, 0, 0, 128), "RGBA color conversion failed")
    assert(color3 == HSB(0, 100, 100), "HSB color conversion failed")
    assert(color4 == HSBA(0, 100, 100, 128), "HSBA color conversion failed")
    assert(color5 == RGBf(1.0, 0.0, 0.0), "RGBf color conversion failed")
    assert(color6 == RGBAf(1.0, 0.0, 0.0, 0.5), "RGBAf color conversion failed")
    wait 0.1

    // 2. Camera test
    say "test camera function"
    SetCameraZoom(1.5)
    assert(GetCameraZoom() == 1.5, "Camera zoom setting failed")
    On(this)
    wait 0.1

    // 3. Game state test
    say "test game state"
    if IsRunned() {
        say "game is running"
        assert(true, "Game should be running")
    }
    wait 0.1

    // 4. Background test
    say "test background function"
    backdropName = BackdropName()
    assert(backdropName != "", "Backdrop name should not be empty")
    PrevBackdrop()
    wait 0.1

    // 6. Sprite property test
    say "test sprite properties"
    if Visible() {
        say "sprite is visible"
        assert(true, "Sprite should be visible")
    }
    parent = Parent()
    assert(parent != nil, "Parent should not be nil")
    if IsCloned() {
        say "this is a clone"
        assert(true, "Sprite should be a clone")
    }
    costumeName = CostumeName()
    assert(costumeName != "", "Costume name should not be empty")
    width = CostumeWidth()
    height = CostumeHeight()
    assert(width > 0 && height > 0, "Costume dimensions should be positive")
    PrevCostume()
    wait 0.1

    // 7. Animation test
    say "test animation"
    Animate("walk")
    assert(true, "Animation should start")
    wait 0.1

	onTestDone(this)
}