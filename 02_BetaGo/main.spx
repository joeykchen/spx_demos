var (
	Chess         Chess
	Button4       Button4
	CurrentChess  CurrentChess
	Cat1          Cat1
	Undoer        Undoer
	undoIdList    List
	undoOpList    List
	undoParamList List
	gameState     List
	restoreList   List
	visitList     List
	col           int
	currentCol    int
	_White        int
	_Eating       int
	_Black        int
	pos           int
	ret           int
	mayBeEaten    int
	currentPlayer int
	currentRow    int
	undoing       int
	player        int
	row           int
	eatNum        int
	eatenPlayer   int
	restoreNum    int
)

func initConsts() {
	_Black = 1
	_White = 2
	_Eating = 3
}

func calcHitPosition(x float64, y float64) {
	col = iround((x + 159) / 17.7)
	row = iround((y - 159) / -17.7)
	if row < 0 || col < 0 || row > 18 || col > 18 {
		ret = 0
	} else {
		ret = row*19 + col + 1
	}
}

func initGameState() {
	gameState.delete All
	for i := 0; i < 361; i++ {
		gameState.append 0
	}
}

func checkEat() {
	eatNum = 0
	eatenPlayer = 3 - currentPlayer
	checkEatChess currentRow+1, currentCol, eatenPlayer
	checkEatChess currentRow-1, currentCol, eatenPlayer
	checkEatChess currentRow, currentCol+1, eatenPlayer
	checkEatChess currentRow, currentCol-1, eatenPlayer
	restoreRestoreList eatenPlayer
	if eatNum == 0 {
		eatenPlayer = currentPlayer
		checkEatChess currentRow, currentCol, eatenPlayer
		restoreRestoreList eatenPlayer
	}
	if eatNum > 0 {
		broadcast "eat chesses", true
	}
}

func checkEatChess(row int, col int, expectPlayer int) {
	mayBeEaten = 1
	confirmChessEatenOrNot row, col, expectPlayer
	if mayBeEaten == 1 {
		eatNum += visitList.len
	} else {
		pos = 1
		for i := visitList.len; i > 0; i-- {
			restoreList.append visitList.at(pos-1)
			pos++
		}
	}
	visitList.delete All
}

func confirmChessEatenOrNot(row int, col int, expectPlayer int) {
	if mayBeEaten == 1 && !(row < 0 || col < 0 || row > 18 || col > 18) {
		pos = row*19 + (col + 1)
		player = gameState.at(pos - 1).int
		if player == expectPlayer {
			visitList.append pos
			gameState.set pos-1, _Eating
			confirmChessEatenOrNot row+1, col, expectPlayer
			confirmChessEatenOrNot row-1, col, expectPlayer
			confirmChessEatenOrNot row, col+1, expectPlayer
			confirmChessEatenOrNot row, col-1, expectPlayer
		} else {
			if player == 0 {
				mayBeEaten = 0
			}
		}
	}
}

func restoreRestoreList(expectPlayer int) {
	restoreNum = restoreList.len
	pos = 1
	for i := restoreList.len; i > 0; i-- {
		gameState.set restoreList.at(pos-1).int-1, expectPlayer
		pos++
	}
	restoreList.delete All
}

onStart => {
	initConsts
	initGameState
	currentPlayer = _Black
}

onClick => {
	calcHitPosition mouseX, mouseY
	if ret > 0 && gameState.at(ret-1).int == 0 {
		currentCol = col
		currentRow = row
		broadcast "try put chess"
	}
}

onMsg "confirm to put chess", => {
	Chess.clone
}

onMsg "put chess done", => {
	checkEat
	currentPlayer = 3 - currentPlayer
}
